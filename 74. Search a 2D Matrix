/**
 * Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:
 *
 * Integers in each row are sorted from left to right.
 * The first integer of each row is greater than the last integer of the previous row.*/

public class Solution {
    public static boolean searchMatrix(int[][] matrix, int target) {
        if (matrix.length==0||matrix[0].length==0) {
            return false;
        }

        int[] pos = {0, 0};

        //search for the right row

        for (int i = 0; i < matrix.length; i++) {
            if (target > matrix[i][matrix[0].length - 1]) {
                pos[0]++;
            } else break;
        }
        if (pos[0] > matrix.length - 1) {
            return false;
        }

        //search for the right column
        for (int j = 0; j < matrix[0].length; j++) {
            if (target == matrix[pos[0]][j]) {
                break;
            } else {
                pos[1]++;
            }
        }

        if (pos[1] > matrix[0].length -1) {
            return false;
        }

        return true;


    }
}
